{"version":3,"sources":["components/WeatherForecast.jsx","components/WeatherForm.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeatherIcons","rangeId","icon","faBolt","faCloudShowersHeavy","faCloudSunRain","faSnowflake","faSmog","faSun","faCloudSun","faCloud","WeatherForecast","props","day","date","output","weekdays","Array","today","Date","tomorrow","setDate","getDate","toDateString","getDay","getWeekDay","date_time","className","size","style","color","fixedWidth","description","Math","round","temp","temp_min","temp_max","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","API_key","App","getWeather","e","a","preventDefault","city","target","elements","value","country","fetch","api_call_current","json","responseCurrent","lat","coord","long","lon","api_call_forecast","responseForecast","setState","days","daily","loaded","state","undefined","this","map","key","dt","min","max","weather","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4WA6CA,SAASA,EAAgBC,GACvB,IAAIC,EAEJ,QAAQ,GACN,KAAKD,GAAW,KAAOA,GAAW,IAChCC,EAAOC,IACP,MACF,KAAKF,GAAW,KAAOA,GAAW,IAChCC,EAAOE,IACP,MACF,KAAKH,GAAW,KAAOA,GAAW,IAChCC,EAAOG,IACP,MACF,KAAiB,MAAZJ,EACHC,EAAOI,IACP,MACF,KAAKL,GAAW,KAAOA,GAAW,IAChCC,EAAOE,IACP,MACF,KAAKH,GAAW,KAAOA,GAAW,IAChCC,EAAOI,IACP,MACF,KAAKL,GAAW,KAAOA,GAAW,IAChCC,EAAOK,IACP,MACF,KAAiB,MAAZN,EACHC,EAAOM,IACP,MACF,KAAiB,MAAZP,EACHC,EAAOO,IACP,MACF,KAAiB,MAAZR,EAGL,KAAKA,GAAW,KAAOA,GAAW,IAChCC,EAAOQ,IACP,MACF,QACER,EAAOO,IAGX,OAAOP,EAoCMS,MA7GS,SAACC,GAGvB,IACMC,EAwER,SAAoBC,GAClB,IAeIC,EAfAC,EAAW,IAAIC,MACjB,SACA,SACA,UACA,YACA,WACA,SACA,YAIEC,EAAQ,IAAIC,KACZC,EAAW,IAAID,KAMnB,OALAC,EAASC,SAAQ,IAAIF,MAAOG,UAAY,GAKhCR,EAAKS,gBACX,KAAKL,EAAMK,eACTR,EAAS,QACT,MACF,KAAKK,EAASG,eACZR,EAAS,WACT,MACF,QACEA,EAASC,EAASF,EAAKU,UAG3B,OAAOT,EAtGKU,CADC,IAAIN,KAAuB,IAAlBP,EAAMc,YAG5B,OACE,yBAAKC,UAAU,SACb,4BAAKd,GACL,wBAAIc,UAAU,QACZ,kBAAC,IAAD,CACEzB,KAAMF,EAAgBY,EAAMV,MAC5B0B,KAAK,KACLC,MAAO,CAAEC,MAAO,QAChBC,YAAU,KAGd,wBAAIJ,UAAU,oBAAoBf,EAAMoB,aAExC,wBAAIL,UAAU,QAAQM,KAAKC,MAAMtB,EAAMuB,MAAvC,QACA,4BACE,0BAAMR,UAAU,mBACbM,KAAKC,MAAMtB,EAAMwB,UADpB,QAGA,0BAAMT,UAAU,kBACbM,KAAKC,MAAMtB,EAAMyB,UADpB,W,MCKOC,MAvCF,SAAC1B,GACZ,OACE,6BACE,uDACA,2DACA,yBAAKe,UAAU,QACb,6BAAMf,EAAM2B,MA2BhB,yBAAKZ,UAAU,0BAA0Ba,KAAK,SAA9C,iCA3BkC,MAC9B,0BAAMC,SAAU7B,EAAM8B,aACpB,yBAAKf,UAAU,QACb,2BACEgB,KAAK,OACLhB,UAAU,eACViB,KAAK,OACLC,aAAa,MACbC,YAAY,SAEd,2BACEH,KAAK,OACLhB,UAAU,eACViB,KAAK,UACLC,aAAa,MACbC,YAAY,YAEd,4BAAQnB,UAAU,mBAAlB,oBClBNoB,EAAU,mCAsFDC,E,kDAnFb,aAAe,IAAD,8BACZ,gBAWFC,WAZc,uCAYD,WAAOC,GAAP,6BAAAC,EAAA,6DACXD,EAAEE,iBAEIC,EAAOH,EAAEI,OAAOC,SAASF,KAAKG,MAC9BC,EAAUP,EAAEI,OAAOC,SAASE,QAAQD,MAJ/B,SAMoBE,MAAM,qDAAD,OACmBL,EADnB,YAC2BI,EAD3B,+BACyDV,IAPlF,cAMLY,EANK,gBAUmBA,EAAiBC,OAVpC,UAULC,EAVK,OAYPC,EAAMD,EAAgBE,MAAMD,IAC5BE,EAAOH,EAAgBE,MAAME,KAE7BZ,IAAQI,EAfD,kCAiBuBC,MAAM,uDAAD,OACoBI,EADpB,gBAC+BE,EAD/B,iEAC4FjB,IAlBxH,eAiBHmB,EAjBG,iBAqBsBA,EAAkBN,OArBxC,QAqBHO,EArBG,OAyBT,EAAKC,SAAS,CACZf,KAAMA,EACNI,QAASA,EACTY,KAAMF,EAAiBG,MACvBC,QAAQ,EACRhC,OAAO,IA9BA,wBAkCT,EAAK6B,SAAS,CACZ7B,OAAO,IAnCA,4CAZC,sDAGZ,EAAKiC,MAAQ,CACXnB,UAAMoB,EACNhB,aAASgB,EACTJ,KAAM,GACNE,QAAQ,EACRhC,OAAO,GARG,E,qDAqDZ,OAAKmC,KAAKF,MAAMD,OAOZ,yBAAK5C,UAAU,OACb,kBAAC,EAAD,CAAMe,YAAagC,KAAKzB,WAAYV,MAAOmC,KAAKF,MAAMjC,QACtD,yBAAKZ,UAAU,aACZ+C,KAAKF,MAAMH,KAAKM,KAAI,SAAC9D,GAElB,OAAO,kBAAC,EAAD,CACL+D,IAAK/D,EAAIgE,GACTnD,UAAWb,EAAIgE,GACf1C,KAAMtB,EAAIsB,KAAKtB,IACfuB,SAAUvB,EAAIsB,KAAK2C,IACnBzC,SAAUxB,EAAIsB,KAAK4C,IACnB/C,YAAanB,EAAImE,QAAQ,GAAGhD,YAC5B9B,KAAMW,EAAImE,QAAQ,GAAGC,UAlB1B,yBAAKtD,UAAU,OACpB,kBAAC,EAAD,CAAMe,YAAagC,KAAKzB,WAAYV,MAAOmC,KAAKF,MAAMjC,a,GAxD5C2C,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7D,GACL8D,QAAQ9D,MAAMA,EAAM+D,c","file":"static/js/main.f22e0b46.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faBolt,\r\n  faCloudShowersHeavy,\r\n  faCloudSunRain,\r\n  faSnowflake,\r\n  faSmog,\r\n  faSun,\r\n  faCloudSun,\r\n  faCloud,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst WeatherForecast = (props) => {\r\n\r\n  // date_time is in seconds not milliseconds\r\n  const date = new Date(props.date_time * 1000);\r\n  const day = getWeekDay(date);\r\n\r\n  return (\r\n    <div className=\"cards\">\r\n      <h1>{day}</h1>\r\n      <h5 className=\"py-4\">\r\n        <FontAwesomeIcon\r\n          icon={getWeatherIcons(props.icon)}\r\n          size=\"6x\"\r\n          style={{ color: \"Grey\" }}\r\n          fixedWidth\r\n        />\r\n      </h5>\r\n      <h4 className=\"py-3 description\">{props.description}</h4>\r\n\r\n      <h1 className=\"py-2\">{Math.round(props.temp)}&deg;</h1>\r\n      <h3>\r\n        <span className=\"px-4 bg-primary\">\r\n          {Math.round(props.temp_min)}&deg;\r\n        </span>\r\n        <span className=\"px-4 bg-danger\">\r\n          {Math.round(props.temp_max)}&deg;\r\n        </span>\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction getWeatherIcons(rangeId) {\r\n  let icon;\r\n\r\n  switch (true) {\r\n    case rangeId >= 200 && rangeId <= 232:\r\n      icon = faBolt;\r\n      break;\r\n    case rangeId >= 300 && rangeId <= 321:\r\n      icon = faCloudShowersHeavy;\r\n      break;\r\n    case rangeId >= 500 && rangeId <= 504:\r\n      icon = faCloudSunRain;\r\n      break;\r\n    case rangeId === 511:\r\n      icon = faSnowflake;\r\n      break;\r\n    case rangeId >= 520 && rangeId <= 531:\r\n      icon = faCloudShowersHeavy;\r\n      break;\r\n    case rangeId >= 600 && rangeId <= 622:\r\n      icon = faSnowflake;\r\n      break;\r\n    case rangeId >= 701 && rangeId <= 781:\r\n      icon = faSmog;\r\n      break;\r\n    case rangeId === 800:\r\n      icon = faSun;\r\n      break;\r\n    case rangeId === 801:\r\n      icon = faCloudSun;\r\n      break;\r\n    case rangeId === 802:\r\n      icon = faCloud;\r\n      break;\r\n    case rangeId >= 803 && rangeId <= 804:\r\n      icon = faCloud;\r\n      break;\r\n    default:\r\n      icon = faCloudSun;\r\n  }\r\n\r\n  return icon;\r\n}\r\n\r\nfunction getWeekDay(date) {\r\n  var weekdays = new Array(\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\"\r\n  );\r\n\r\n  // var day = date.getDay();\r\n  var today = new Date();\r\n  var tomorrow = new Date();\r\n  tomorrow.setDate(new Date().getDate() + 1);\r\n\r\n  var output;\r\n\r\n  // If dates are equal print with Today/Tomorrow else return day of the week\r\n  switch (date.toDateString()) {\r\n    case today.toDateString():\r\n      output = \"Today\";\r\n      break;\r\n    case tomorrow.toDateString():\r\n      output = \"Tomorrow\";\r\n      break;\r\n    default:\r\n      output = weekdays[date.getDay()];\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport default WeatherForecast;\r\n","import React from \"react\";\r\nimport \"./WeatherForm.css\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>Weekly Weather Forecast</h1>\r\n      <h5>Enter your City and Country</h5>\r\n      <div className=\"form\">\r\n        <div>{props.error ? error() : null}</div>\r\n        <form onSubmit={props.loadWeather}>\r\n          <div className=\"form\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n            <button className=\"btn btn-primary\">Get Weather</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\n\nimport \"./App.css\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Forecast from \"./components/WeatherForecast\";\nimport Form from \"./components/WeatherForm\";\n\nconst API_key = \"baee18bd9254b7035c03d7382ddec25e\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      days: [],\n      loaded: false,\n      error: false\n    };\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call_current = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${API_key}`\n    );\n\n    const responseCurrent = await api_call_current.json();\n\n    let lat = responseCurrent.coord.lat;\n    let long = responseCurrent.coord.lon;\n\n    if (city && country) {\n      // Call forecast API using lat & long returned from current API\n      const api_call_forecast = await fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=metric&exclude={current,minutely,hourly}&appid=${API_key}`\n      );\n\n      const responseForecast = await api_call_forecast.json();\n      // console.log(responseForecast);\n\n      // Set Current Values\n      this.setState({\n        city: city,\n        country: country,\n        days: responseForecast.daily,\n        loaded: true,\n        error: false\n      });\n    }\n    else {\n      this.setState({\n        error: true\n      });\n    }\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error} />\n      </div>\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <Form loadWeather={this.getWeather} error={this.state.error} />\n          <div className=\"container\">\n            {this.state.days.map((day) => {             \n                // Return the element. Also pass key\n                return <Forecast\n                  key={day.dt}\n                  date_time={day.dt}\n                  temp={day.temp.day}\n                  temp_min={day.temp.min}\n                  temp_max={day.temp.max}\n                  description={day.weather[0].description}\n                  icon={day.weather[0].id}\n                />\n              })\n            }\n          </div>\n        </div>\n      );\n        }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}